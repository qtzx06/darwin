#!/usr/bin/env python3
"""
Code viewer for the Letta AI Agent PM Simulator.
View generated code from all agents.
"""
import json
import os
from pathlib import Path
from datetime import datetime
from rich.console import Console
from rich.panel import Panel
from rich.syntax import Syntax
from rich.text import Text
from rich.table import Table

console = Console()

def find_latest_session():
    """Find the most recent session file."""
    logs_dir = Path("logs")
    if not logs_dir.exists():
        return None
    
    session_files = list(logs_dir.glob("session_*.json"))
    if not session_files:
        return None
    
    # Sort by modification time (most recent first)
    session_files.sort(key=os.path.getmtime, reverse=True)
    
    # Try to find a personality session first
    for session_file in session_files:
        try:
            with open(session_file, 'r') as f:
                data = json.load(f)
                # Check if this is a personality session
                agents = data.get("agents", {})
                is_personality = any("The Hacker" in str(agent_data.get("name", "")) or 
                                   "The Nerd" in str(agent_data.get("name", "")) or
                                   "The Speed Demon" in str(agent_data.get("name", "")) or
                                   "The Artist" in str(agent_data.get("name", ""))
                                   for agent_data in agents.values())
                if is_personality:
                    return session_file
        except:
            continue
    
    # If no personality session found, return the most recent
    return session_files[0]

def load_session_data(session_file):
    """Load session data from JSON file."""
    try:
        with open(session_file, 'r') as f:
            return json.load(f)
    except Exception as e:
        console.print(f"[red]Error loading session data: {e}[/red]")
        return None

def view_agent_code(session_data, agent_id, agent_name):
    """View code generated by a specific agent."""
    # Get artifact data from the session
    artifacts = session_data.get("artifacts", [])
    agent_artifacts = [a for a in artifacts if a.get("agent_id") == agent_id]
    
    if not agent_artifacts:
        console.print(f"[yellow]No artifacts found for {agent_name}[/yellow]")
        return
    
    console.print(Panel(f"Code generated by {agent_name}", title=f"ü§ñ {agent_name}", border_style="blue"))
    
    for artifact in agent_artifacts:
        artifact_id = artifact.get("artifact_id", "Unknown")
        artifact_type = artifact.get("type", "unknown")
        description = artifact.get("description", "")
        
        console.print(f"\nüì¶ Artifact: {artifact_id}")
        console.print(f"Type: {artifact_type}")
        if description:
            console.print(f"Description: {description}")
        
        # Try to load the actual artifact file
        artifact_file = Path("artifacts") / f"{artifact_id}.{artifact_type}"
        if artifact_file.exists():
            try:
                with open(artifact_file, 'r') as f:
                    content = f.read()
                
                # Try to parse as JSON first (structured content)
                try:
                    artifact_data = json.loads(content)
                    if isinstance(artifact_data, dict) and "code" in artifact_data:
                        code = artifact_data["code"]
                        language = artifact_data.get("language", "typescript")  # Default to TypeScript for personality agents
                        personality = artifact_data.get("personality", "")
                        
                        # Show personality info
                        if personality:
                            console.print(f"[dim]Personality: {personality}[/dim]")
                    else:
                        code = content
                        language = "text"
                except:
                    # If not JSON, treat as plain text
                    code = content
                    language = "typescript" if artifact_type == "code" else "text"
                
                # Display the code with syntax highlighting
                syntax = Syntax(code, language, theme="monokai", line_numbers=True)
                console.print(syntax)
                
            except Exception as e:
                console.print(f"[red]Error reading artifact file: {e}[/red]")
        else:
            console.print(f"[yellow]Artifact file not found: {artifact_file}[/yellow]")

def view_all_code(session_data):
    """View code from all agents."""
    agents = session_data.get("agents", {})
    
    console.print(Panel(
        "Generated Code from All Agents",
        title="üìù Code Viewer",
        border_style="bold blue"
    ))
    
    # Show summary table
    table = Table(title="ü§ñ Agents and Their Artifacts", show_header=True, header_style="bold magenta")
    table.add_column("Agent", style="cyan")
    table.add_column("Type", style="green")
    table.add_column("Artifacts", style="yellow")
    table.add_column("Last Activity", style="blue")
    
    for agent_id, agent_data in agents.items():
        if agent_data.get("type") == "coding":
            artifacts = session_data.get("artifacts", [])
            agent_artifacts = [a for a in artifacts if a.get("agent_id") == agent_id]
            
            activities = agent_data.get("activities", [])
            last_activity = activities[-1]["timestamp"] if activities else "None"
            
            table.add_row(
                agent_data.get("name", agent_id),
                agent_data.get("type", "unknown"),
                str(len(agent_artifacts)),
                last_activity
            )
    
    console.print(table)
    
    # Show code for each agent
    for agent_id, agent_data in agents.items():
        if agent_data.get("type") == "coding":
            view_agent_code(session_data, agent_id, agent_data.get("name", agent_id))
            console.print("\n" + "="*80 + "\n")

def save_code_to_files(session_data, output_dir="generated_code"):
    """Save all generated code to individual files."""
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    agents = session_data.get("agents", {})
    artifacts = session_data.get("artifacts", [])
    
    saved_files = []
    
    for agent_id, agent_data in agents.items():
        if agent_data.get("type") == "coding":
            agent_name = agent_data.get("name", agent_id)
            agent_artifacts = [a for a in artifacts if a.get("agent_id") == agent_id]
            
            for i, artifact in enumerate(agent_artifacts):
                artifact_id = artifact.get("artifact_id", "unknown")
                artifact_type = artifact.get("type", "txt")
                
                # Try to load the artifact content
                artifact_file = Path("artifacts") / f"{artifact_id}.{artifact_type}"
                if artifact_file.exists():
                    try:
                        with open(artifact_file, 'r') as f:
                            content = f.read()
                        
                        # Try to parse as JSON to extract code
                        try:
                            artifact_data = json.loads(content)
                            if isinstance(artifact_data, dict) and "code" in artifact_data:
                                code = artifact_data["code"]
                                language = artifact_data.get("language", "ts")  # Default to TypeScript for personality agents
                                personality = artifact_data.get("personality", "")
                                
                                # Add personality comment to the code
                                if personality:
                                    code = f"// Generated by {agent_name} ({personality})\n// {artifact_data.get('description', '')}\n\n{code}"
                            else:
                                code = content
                                language = "txt"
                        except:
                            code = content
                            language = "ts" if artifact_type == "code" else "txt"
                        
                        # Save to file
                        safe_name = agent_name.lower().replace(" ", "_").replace("-", "_").replace("'", "")
                        filename = f"{safe_name}_{i+1}.{language}"
                        filepath = output_path / filename
                        
                        with open(filepath, 'w') as f:
                            f.write(code)
                        
                        saved_files.append(str(filepath))
                        
                    except Exception as e:
                        console.print(f"[red]Error processing {artifact_id}: {e}[/red]")
    
    if saved_files:
        console.print(f"\nüíæ Code saved to {output_dir}/ directory:")
        for file_path in saved_files:
            console.print(f"  ‚Ä¢ {file_path}")
    else:
        console.print("[yellow]No code files were saved.[/yellow]")

def main():
    """Main code viewer function."""
    console.print(Panel(
        "Letta AI Agent PM Simulator - Code Viewer",
        title="üìù Code Viewer",
        border_style="bold blue"
    ))
    
    # Find latest session
    session_file = find_latest_session()
    if not session_file:
        console.print("[yellow]No session files found. Run the simulator first![/yellow]")
        return
    
    console.print(f"üìÅ Loading session: {session_file}")
    
    # Load session data
    session_data = load_session_data(session_file)
    if not session_data:
        return
    
    # Show project info
    project = session_data.get("project_name", session_data.get("project_description", "Unknown"))
    console.print(f"üìã Project: {project}")
    
    # Check if this is a personality-driven session
    agents = session_data.get("agents", {})
    is_personality_session = any("The Hacker" in str(agent_data.get("name", "")) or 
                                "The Nerd" in str(agent_data.get("name", "")) or
                                "The Speed Demon" in str(agent_data.get("name", "")) or
                                "The Artist" in str(agent_data.get("name", ""))
                                for agent_data in agents.values())
    
    if is_personality_session:
        console.print("[green]üé≠ Personality-Driven Session Detected![/green]")
        console.print("[dim]This session features agents with unique personalities![/dim]")
    
    # View all code
    view_all_code(session_data)
    
    # Ask if user wants to save code to files
    console.print("\n" + "="*80)
    console.print("üíæ Save all generated code to files? (y/n): ", end="")
    
    try:
        choice = input().lower().strip()
        if choice in ['y', 'yes']:
            save_code_to_files(session_data)
    except KeyboardInterrupt:
        console.print("\n[yellow]Skipping file save.[/yellow]")

if __name__ == "__main__":
    main()

