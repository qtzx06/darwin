"""
Claude API manager for the chat simulator.
Handles API calls to Claude Sonnet for generating chat responses.
"""
import os
import asyncio
from typing import List, Dict, Any, Optional
import anthropic
from dotenv import load_dotenv

load_dotenv()


class ClaudeManager:
    """Manages interactions with Claude Sonnet API."""
    
    def __init__(self, system_prompt: str):
        self.api_key = os.getenv("CLAUDE_API_KEY")
        if not self.api_key:
            raise ValueError("CLAUDE_API_KEY not found in environment variables")
        
        self.client = anthropic.Anthropic(api_key=self.api_key)
        self.system_prompt = system_prompt
        self.conversation_history: List[Dict[str, str]] = []
        
    async def get_chat_response(self, trigger_context: Optional[str] = None) -> str:
        """
        Get a chat response from Claude based on current context.
        
        Args:
            trigger_context: Optional context about what triggered this call
                           (e.g., "Frontend wants to talk to Backend")
        
        Returns:
            The chat message(s) generated by Claude
        """
        try:
            # Build the prompt
            messages = self._build_messages(trigger_context)
            
            # Call Claude API (synchronous, so run in executor)
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                lambda: self.client.messages.create(
                    model="claude-sonnet-4-20250514",
                    max_tokens=150,  # Keep responses SHORT like Twitch chat
                    system=self.system_prompt,
                    messages=messages
                )
            )
            
            # Extract response text
            response_text = response.content[0].text
            
            # Add to conversation history
            self.conversation_history.append({
                "role": "assistant",
                "content": response_text
            })
            
            return response_text
            
        except Exception as e:
            print(f"[ERROR] Claude API call failed: {e}")
            return None
    
    def _build_messages(self, trigger_context: Optional[str]) -> List[Dict[str, str]]:
        """Build the messages array for Claude API."""
        messages = []
        
        # Add conversation history
        messages.extend(self.conversation_history)
        
        # Add trigger context if provided
        if trigger_context:
            messages.append({
                "role": "user",
                "content": trigger_context
            })
        
        # If no messages yet, start the conversation
        if not messages:
            messages.append({
                "role": "user",
                "content": "Start the chat! The agents are just beginning their work session."
            })
        
        return messages
    
    def add_user_message(self, message: str, is_boss: bool = True):
        """
        Add a user message to the conversation history.
        
        Args:
            message: The message content
            is_boss: Whether this is from Boss (True) or system (False)
        """
        prefix = "Boss: " if is_boss else ""
        self.conversation_history.append({
            "role": "user",
            "content": f"{prefix}{message}"
        })
    
    def add_system_context(self, context: str):
        """Add system context to guide the next response."""
        self.conversation_history.append({
            "role": "user", 
            "content": f"[System context: {context}]"
        })
    
    def get_history_summary(self) -> str:
        """Get a summary of the conversation history."""
        return f"{len(self.conversation_history)} messages in history"
    
    def clear_history(self):
        """Clear conversation history (use sparingly)."""
        self.conversation_history = []
