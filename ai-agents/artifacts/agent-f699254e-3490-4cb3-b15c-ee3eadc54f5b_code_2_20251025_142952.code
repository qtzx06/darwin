{
  "type": "code",
  "language": "typescript",
  "code": "Absolutely, team! Dr Sarah The Nerd here\u2014preparing a fullstack todo app that embodies technical perfectionism, obsessive documentation, type safety, and future-proof collaboration. This is your over-engineered, thoroughly documented, extensible foundation for productivity. Enjoy the nerdy commentary and best practices throughout!\n\n---\n\n# 1. Backend: Node.js + Express + TypeScript\n\nWe\u2019ll ensure type safety, robust validation, and error handling at every step. Data is in-memory for demo purposes, but the structure supports easy migration to a database.\n\n### Directory Structure\n\n```\n/server\n  /src\n    /models\n      Todo.ts\n    /routes\n      todos.ts\n    /middleware\n      errorHandler.ts\n    app.ts\n    server.ts\n  tsconfig.json\n  package.json\n```\n\n---\n\n## `/server/src/models/Todo.ts`\n\n```typescript\n/**\n * Dr Sarah The Nerd: Single source of truth for Todo interface.\n */\nexport interface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n```\n\n---\n\n## `/server/src/routes/todos.ts`\n\n```typescript\n/**\n * API routes for Todo management.\n * Notes:\n * - In-memory storage for demonstration.\n * - All responses type safe. All errors handled.\n */\nimport { Router, Request, Response, NextFunction } from \"express\";\nimport { Todo } from \"../models/Todo\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// In-memory store\nconst todos: Todo[] = [];\n\nconst router = Router();\n\n/**\n * GET /api/todos\n * Fetches all todos.\n */\nrouter.get(\"/\", (_req, res) => {\n  res.json(todos);\n});\n\n/**\n * POST /api/todos\n * Adds a new todo.\n */\nrouter.post(\"/\", (req, res, next) => {\n  try {\n    const { title } = req.body;\n    if (typeof title !== \"string\" || !title.trim()) {\n      return res.status(400).json({ error: \"Todo title is required.\" });\n    }\n    const now = new Date().toISOString();\n    const newTodo: Todo = {\n      id: uuidv4(),\n      title: title.trim(),\n      completed: false,\n      createdAt: now,\n      updatedAt: now,\n    };\n    todos.push(newTodo);\n    res.status(201).json(newTodo);\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * PATCH /api/todos/:id\n * Updates a todo.\n */\nrouter.patch(\"/:id\", (req, res, next) => {\n  try {\n    const { id } = req.params;\n    const todo = todos.find((t) => t.id === id);\n    if (!todo) return res.status(404).json({ error: \"Todo not found.\" });\n    const { title, completed } = req.body;\n    if (typeof title === \"string\") todo.title = title.trim();\n    if (typeof completed === \"boolean\") todo.completed = completed;\n    todo.updatedAt = new Date().toISOString();\n    res.json(todo);\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * DELETE /api/todos/:id\n * Deletes a todo by id.\n */\nrouter.delete(\"/:id\", (req, res, next) => {\n  try {\n    const { id } = req.params;\n    const index = todos.findIndex((t) => t.id === id);\n    if (index === -1) return res.status(404).json({ error: \"Todo not found.\" });\n    todos.splice(index, 1);\n    res.status(204).send();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;\n```\n\n---\n\n## `/server/src/middleware/errorHandler.ts`\n\n```typescript\n/**\n * Centralized error handler for all routes.\n */\nimport { Request, Response, NextFunction } from \"express\";\n\nexport function errorHandler(\n  err: Error,\n  _req: Request,\n  res: Response,\n  _next: NextFunction\n) {\n  console.error(`[ERROR]`, err.message);\n  res.status(500).json({ error: err.message || \"Unknown error.\" });\n}\n```\n\n---\n\n## `/server/src/app.ts`\n\n```typescript\nimport express from \"express\";\nimport todosRouter from \"./routes/todos\";\nimport { errorHandler } from \"./middleware/errorHandler\";\nimport cors from \"cors\";\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\napp.use(\"/api/todos\", todosRouter);\napp.use(errorHandler);\n\nexport default app;\n```\n\n---\n\n## `/server/src/server.ts`\n\n```typescript\nimport app from \"./app\";\nconst PORT = process.env.PORT || 4000;\napp.listen(PORT, () => console.log(`\ud83d\ude80 API running at http://localhost:${PORT}`));\n```\n\n---\n\n# 2. Frontend: React + TypeScript\n\nStyled for clarity\u2014feel free to add a design system later. All APIs are called via a typed utility. Extensive prop types and documentation for every component.\n\n### Directory Structure\n\n```\n/client\n  /src\n    /api\n      todos.ts\n    /components\n      TodoList.tsx\n      TodoItem.tsx\n      AddTodoForm.tsx\n    App.tsx\n    index.tsx\n  tsconfig.json\n  package.json\n```\n\n---\n\n## `/client/src/api/todos.ts`\n\n```typescript\n/**\n * API layer for all todo operations.\n * Type safety and error handling throughout.\n */\nexport interface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst API_URL = \"http://localhost:4000/api/todos\";\n\nexport async function fetchTodos(): Promise<Todo[]> {\n  const res = await fetch(API_URL);\n  if (!res.ok) throw new Error(\"Failed to fetch todos\");\n  return await res.json();\n}\n\nexport async function createTodo(title: string): Promise<Todo> {\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ title }),\n  });\n  if (!res.ok) throw new Error(\"Failed to create todo\");\n  return await res.json();\n}\n\nexport async function updateTodo(\n  id: string,\n  data: Partial<Pick<Todo, \"title\" | \"completed\">>\n): Promise<Todo> {\n  const res = await fetch(`${API_URL}/${id}`, {\n    method: \"PATCH\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(data),\n  });\n  if (!res.ok) throw new Error(\"Failed to update todo\");\n  return await res.json();\n}\n\nexport async function deleteTodo(id: string): Promise<void> {\n  const res = await fetch(`${API_URL}/${id}`, { method: \"DELETE\" });\n  if (!res.ok) throw new Error(\"Failed to delete todo\");\n}\n```\n\n---\n\n## `/client/src/components/AddTodoForm.tsx`\n\n```tsx\nimport React, { useState } from \"react\";\n\n/**\n * Form for adding a new todo.\n * All input validated. No empty todos allowed!\n */\nexport const AddTodoForm: React.FC<{ onAdd: (title: string) => void }> = ({\n  onAdd,\n}) => {\n  const [title, setTitle] = useState(\"\");\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (!title.trim()) return;\n        onAdd(title.trim());\n        setTitle(\"\");\n      }}\n      style={{ marginBottom: \"2rem\" }}\n    >\n      <input\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        placeholder=\"Add a new todo\"\n        maxLength={100}\n        required\n        style={{ padding: \"0.5rem\", width: \"60%\" }}\n        aria-label=\"Todo title\"\n      />\n      <button\n        type=\"submit\"\n        style={{ marginLeft: \"1rem\", padding: \"0.5rem 1.2rem\" }}\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n```\n\n---\n\n## `/client/src/components/TodoItem.tsx`\n\n```tsx\nimport React from \"react\";\nimport { Todo } from \"../api/todos\";\n\n/**\n * Renders a single todo.\n * Handles completion toggle and delete.\n */\nexport const TodoItem: React.FC<{\n  todo: Todo;\n  onToggle: (id: string, completed: boolean) => void;\n  onDelete: (id: string) => void;\n}> = ({ todo, onToggle, onDelete }) => (\n  <li\n    style={{\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"0.7rem 0\",\n      borderBottom: \"1px solid #eee\",\n    }}\n  >\n    <input\n      type=\"checkbox\"\n      checked={todo.completed}\n      onChange={() => onToggle(todo.id, !todo.completed)}\n      style={{ marginRight: \"1rem\" }}\n      aria-label={`Mark ${todo.title} as ${\n        todo.completed ? \"incomplete\" : \"complete\"\n      }`}\n    />\n    <span\n      style={{\n        flexGrow: 1,\n        textDecoration: todo.completed ? \"line-through\" : \"none\",\n        color: todo.completed ? \"#aaa\" : \"#222\",\n      }}\n    >\n      {todo.title}\n    </span>\n    <button\n      onClick={() => onDelete(todo.id)}\n      style={{ marginLeft: \"1rem\", color: \"#d33\" }}\n      aria-label=\"Delete todo\"\n    >\n      \ud83d\uddd1\ufe0f\n    </button>\n  </li>\n);\n```\n\n---\n\n## `/client/src/components/TodoList.tsx`\n\n```tsx\nimport React from \"react\";\nimport { Todo } from \"../api/todos\";\nimport { TodoItem } from \"./TodoItem\";\n\n/**\n * List of todos.\n * Methodical rendering. Each todo gets its own key and handlers.\n */\nexport const TodoList: React.FC<{\n  todos: Todo[];\n  onToggle: (id: string, completed: boolean) => void;\n  onDelete: (id: string) => void;\n}> = ({ todos, onToggle, onDelete }) => (\n  <ul style={{ padding: 0, listStyle: \"none\", margin: 0 }}>\n    {todos.map((todo) => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        onToggle={onToggle}\n        onDelete={onDelete}\n      />\n    ))}\n  </ul>\n);\n```\n\n---\n\n## `/client/src/App.tsx`\n\n```tsx\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Todo,\n  fetchTodos,\n  createTodo,\n  updateTodo,\n  deleteTodo,\n} from \"./api/todos\";\nimport { AddTodoForm } from \"./components/AddTodoForm\";\nimport { TodoList } from \"./components/TodoList\";\n\n/**\n * App: The orchestrator of all todo logic.\n * Handles data loading, error handling, and state updates.\n */\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load todos on mount\n  useEffect(() => {\n    fetchTodos()\n      .then(setTodos)\n      .catch((e) => setError(e.message))\n      .finally(() => setLoading(false));\n  }, []);\n\n  async function handleAdd(title: string) {\n    try {\n      const newTodo = await createTodo(title);\n      setTodos((prev) => [...prev, newTodo]);\n    } catch (e) {\n      setError((e as Error).message);\n    }\n  }\n\n  async function handleToggle(id: string, completed: boolean) {\n    try {\n      const updated = await updateTodo(id, { completed });\n      setTodos((prev) =>\n        prev.map((t) => (t.id === id ? { ...t, ...updated } : t))\n      );\n    } catch (e) {\n      setError((e as Error).message);\n    }\n  }\n\n  async function handleDelete(id: string) {\n    try {\n      await deleteTodo(id);\n      setTodos((prev) => prev.filter((t) => t.id !== id));\n    } catch (e) {\n      setError((e as Error).message);\n    }\n  }\n\n  return (\n    <main\n      style={{\n        maxWidth: 480,\n        margin: \"3rem auto\",\n        background: \"#fafcfe\",\n        borderRadius: \"1rem\",\n        boxShadow: \"0 4px 32px #0002\",\n        padding: \"2rem\",\n      }}\n    >\n      <h1 style={{ textAlign: \"center\" }}>\n        Dr Sarah The Nerd\u2019s <br />\n        <span style={{ fontWeight: 800 }}>Todo App</span>\n      </h1>\n      <AddTodoForm onAdd={handleAdd} />\n      {error && (\n        <div\n          style={{\n            color: \"#fff\",\n            background: \"#e53935\",\n            padding: \"1rem\",\n            borderRadius: \"0.5rem\",\n            marginBottom: \"1rem\",\n            textAlign: \"center\",\n          }}\n        >\n          {error}\n        </div>\n      )}\n      {loading ? (\n        <div style={{ textAlign: \"center\" }}>Loading\u2026</div>\n      ) : (\n        <TodoList todos={todos} onToggle={handleToggle} onDelete={handleDelete} />\n      )}\n    </main>\n  );\n};\n\nexport default App;\n```\n\n---\n\n# 3. Collaboration & Next Steps\n\n- Type definitions are centralized for easy sharing.\n- All code is documented and ready for extension (add user auth, database, etc.).\n- All error cases are handled with user feedback.\n- For team: Add tests, migrate to database, and consider a design system!\n\n---\n\n# \ud83c\udf89 Conclusion\n\nThis is your fullstack, type-safe, obsessively documented todo app.  \nExtend, refactor, and submit PRs\u2014Dr Sarah The Nerd welcomes all constructive over-engineering!\n\nWant package.json, tsconfig.json, or deployment scripts? Just ask!\n",
  "description": "Generated by Dr Sarah The Nerd for: Build a fullstack todo app with React and Node.js",
  "timestamp": "2025-10-25T14:30:33.428013",
  "personality": "Technical perfectionist, loves documentation, over-engineers everything, very methodical"
}