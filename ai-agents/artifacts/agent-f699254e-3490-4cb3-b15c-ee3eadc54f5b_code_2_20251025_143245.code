{
  "type": "code",
  "language": "typescript",
  "code": "Absolutely! Prepare for a fullstack solution that\u2019s not only functional, but so well-documented and type-safe that future developers will weep tears of gratitude. Here\u2019s my approach as Dr Sarah The Nerd:\n\n---\n\n# CalHacks Landing Page \u2014 Fullstack, Over-Engineered, and Meticulously Documented\n\n> \u201cIf it isn\u2019t documented, it doesn\u2019t exist.\u201d \u2013 Dr Sarah The Nerd\n\n## Table of Contents\n\n1. [Backend: Node.js + Express + TypeScript](#backend)\n2. [Frontend: React + TypeScript + styled-components](#frontend)\n3. [Collaboration Notes](#collaboration-notes)\n\n---\n\n<a name=\"backend\"></a>\n## 1. Backend: Node.js + Express + TypeScript\n\n**Purpose:** Serve event details dynamically and enable future extensibility (e.g. sponsor info, FAQs, etc).\n\n### Directory: `/server`\n\n#### `/server/src/types/EventInfo.ts`\n```typescript\n/**\n * @file EventInfo.ts\n * @description Canonical type definition for CalHacks event meta.\n */\nexport interface EventInfo {\n  title: string;\n  date: string; // ISO 8601 format for max compatibility\n  location: string;\n  description: string;\n  heroImageUrl: string;\n  registrationUrl: string;\n}\n```\n\n#### `/server/src/routes/eventInfo.ts`\n```typescript\nimport { Router, Request, Response } from \"express\";\nimport { EventInfo } from \"../types/EventInfo\";\n\n/**\n * @constant eventInfo\n * @description Centralized source of event data.\n * TODO: In production, fetch from database or CMS.\n */\nconst eventInfo: EventInfo = {\n  title: \"CalHacks 2025\",\n  date: \"2025-11-14T09:00:00-08:00\",\n  location: \"UC Berkeley, California Memorial Stadium\",\n  description:\n    \"Join 2,000+ top hackers for a legendary weekend of innovation, collaboration, and fun. Whether you\u2019re a beginner or a seasoned pro, CalHacks welcomes all!\",\n  heroImageUrl: \"https://calhacks.io/static/hero-banner.png\", // Replace with actual asset\n  registrationUrl: \"https://calhacks.io/register\"\n};\n\nconst router = Router();\n\n/**\n * GET /api/event-info\n * @returns {EventInfo} - Event details for CalHacks\n */\nrouter.get(\"/\", (_req: Request, res: Response) => {\n  res.json(eventInfo);\n});\n\nexport default router;\n```\n\n#### `/server/src/app.ts`\n```typescript\nimport express from \"express\";\nimport cors from \"cors\";\nimport eventInfoRouter from \"./routes/eventInfo\";\n\n/**\n * @file app.ts\n * @description Express app assembly with all middleware and routers.\n */\nconst app = express();\n\napp.use(cors()); // Enable for frontend dev\napp.use(express.json()); // Ready for future post endpoints\n\n// All routes\napp.use(\"/api/event-info\", eventInfoRouter);\n\nexport default app;\n```\n\n#### `/server/src/server.ts`\n```typescript\nimport app from \"./app\";\n\n/**\n * @file server.ts\n * @description Entrypoint for backend server.\n */\nconst PORT = process.env.PORT || 4000;\n\napp.listen(PORT, () => {\n  console.log(`\ud83d\ude80 [CalHacks API] Server running at http://localhost:${PORT}`);\n});\n```\n\n---\n\n<a name=\"frontend\"></a>\n## 2. Frontend: React + TypeScript + styled-components\n\n**Purpose:** Render a visually appealing, highly accessible, and easily extensible landing page that fetches event data dynamically.\n\n### Directory: `/client`\n\n#### `/client/src/api/eventInfo.ts`\n```typescript\n/**\n * @file eventInfo.ts\n * @description API utility for fetching event details.\n */\nexport interface EventInfo {\n  title: string;\n  date: string;\n  location: string;\n  description: string;\n  heroImageUrl: string;\n  registrationUrl: string;\n}\n\n/**\n * Fetch event info from backend.\n * @returns Promise<EventInfo>\n */\nexport async function fetchEventInfo(): Promise<EventInfo> {\n  const res = await fetch(\"http://localhost:4000/api/event-info\");\n  if (!res.ok) throw new Error(\"Failed to fetch event info.\");\n  return await res.json();\n}\n```\n\n#### `/client/src/components/Navbar.tsx`\n```tsx\nimport React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * @component Navbar\n * @description Top navigation bar (expand as needed).\n */\nconst Nav = styled.nav`\n  width: 100%;\n  background: #001f3f;\n  color: #fff;\n  padding: 1.2rem 2rem;\n  font-family: 'Segoe UI', sans-serif;\n  font-size: 1.5rem;\n  font-weight: bold;\n`;\n\nexport const Navbar: React.FC = () => <Nav>CalHacks 2025</Nav>;\n```\n\n#### `/client/src/components/HeroSection.tsx`\n```tsx\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { EventInfo } from \"../api/eventInfo\";\n\n/**\n * @component HeroSection\n * @description Main hero banner: event title, description, image, and call to action.\n */\nconst Hero = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 60vh;\n  background: linear-gradient(135deg, #0074d9 0%, #7fdbff 100%);\n  color: #fff;\n  text-align: center;\n  padding: 2rem 1rem;\n`;\n\nconst HeroImage = styled.img`\n  max-width: 480px;\n  width: 100%;\n  border-radius: 1rem;\n  box-shadow: 0 6px 24px rgba(0,0,0,0.15);\n  margin: 2rem 0;\n`;\n\nconst Title = styled.h1`\n  font-size: 3rem;\n  margin: 0.5rem 0;\n`;\n\nconst Subtitle = styled.p`\n  font-size: 1.3rem;\n  max-width: 36rem;\n  margin: 1rem auto 2rem auto;\n`;\n\nconst RegisterButton = styled.a`\n  background: #fff;\n  color: #0074d9;\n  padding: 1rem 2.5rem;\n  border-radius: 2em;\n  font-size: 1.2rem;\n  font-weight: bold;\n  text-decoration: none;\n  margin-top: 1rem;\n  transition: background 0.2s, color 0.2s;\n  &:hover {\n    background: #0074d9;\n    color: #fff;\n  }\n`;\n\ntype Props = { event: EventInfo };\n\nexport const HeroSection: React.FC<Props> = ({ event }) => (\n  <Hero>\n    <Title>{event.title}</Title>\n    <Subtitle>{event.description}</Subtitle>\n    <HeroImage src={event.heroImageUrl} alt={`${event.title} banner`} />\n    <RegisterButton href={event.registrationUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n      Register Now!\n    </RegisterButton>\n  </Hero>\n);\n```\n\n#### `/client/src/components/InfoSection.tsx`\n```tsx\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { EventInfo } from \"../api/eventInfo\";\n\n/**\n * @component InfoSection\n * @description Displays event details: date and location.\n */\nconst Section = styled.section`\n  margin: 3rem auto;\n  max-width: 800px;\n  padding: 2rem;\n  background: #f8fafc;\n  border-radius: 1rem;\n  box-shadow: 0 2px 12px rgba(0,0,0,0.03);\n  color: #001f3f;\n`;\n\nconst InfoItem = styled.div`\n  margin-bottom: 2rem;\n`;\n\nconst Label = styled.span`\n  font-weight: bold;\n  letter-spacing: 1px;\n`;\n\ntype Props = { event: EventInfo };\n\nexport const InfoSection: React.FC<Props> = ({ event }) => (\n  <Section aria-label=\"Event Details\">\n    <InfoItem>\n      <Label>Date:</Label> {new Date(event.date).toLocaleString(\"en-US\", { dateStyle: \"full\", timeStyle: \"short\", timeZone: \"America/Los_Angeles\" })}\n    </InfoItem>\n    <InfoItem>\n      <Label>Location:</Label> {event.location}\n    </InfoItem>\n    {/* Future: add FAQ, sponsors, live countdown, etc. */}\n  </Section>\n);\n```\n\n#### `/client/src/App.tsx`\n```tsx\nimport React, { useEffect, useState } from \"react\";\nimport { fetchEventInfo, EventInfo } from \"./api/eventInfo\";\nimport { Navbar } from \"./components/Navbar\";\nimport { HeroSection } from \"./components/HeroSection\";\nimport { InfoSection } from \"./components/InfoSection\";\n\n/**\n * @component App\n * @description Top-level orchestrator for the landing page.\n */\nconst App: React.FC = () => {\n  const [event, setEvent] = useState<EventInfo | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchEventInfo()\n      .then(setEvent)\n      .catch((err) => setError(\"Could not load event info: \" + err.message));\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      {error && <div style={{ background: \"#ff4136\", color: \"#fff\", padding: \"1rem\" }}>{error}</div>}\n      {event ? (\n        <>\n          <HeroSection event={event} />\n          <InfoSection event={event} />\n        </>\n      ) : (\n        !error && <div style={{ padding: \"2rem\" }}>Loading CalHacks awesomeness\u2026</div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n```\n\n---\n\n<a name=\"collaboration-notes\"></a>\n## 3. Collaboration Notes\n\n- **Type safety:** All data is typed. If you add new event fields, update `EventInfo` in both frontend and backend.\n- **Documentation:** Every component, type, and route is documented. Please continue this practice for all additions.\n- **Extensibility:** Add new API endpoints (e.g., FAQ, sponsors) and corresponding frontend components as needed.\n- **Error handling:** All async fetches and routes are wrapped with robust error handling.\n- **Style:** Use `styled-components` for scalability and maintainability. All styles are component-scoped.\n- **PR Reviews:** Review for documentation, type safety, and best practices.\n\n---\n\n## \ud83d\ude80 How to Run\n\n**Backend:**  \n```bash\ncd server\nnpm install\nnpm run dev\n```\n\n**Frontend:**  \n```bash\ncd client\nnpm install\nnpm start\n```\n\n---\n\n## \ud83c\udfc1 Summary\n\nYou now have a fullstack, type-safe, obsessively documented CalHacks landing page that\u2019s delightful for users and future developers alike!  \nReady for team expansion, and extensible for all sorts of hackathon needs.\n\nIf you want to see `package.json`, deployment scripts, or bonus features (FAQ, countdown, sponsor carousel), let me know!\n\nHappy hacking,  \n**Dr Sarah The Nerd**\n",
  "description": "Generated by Dr Sarah The Nerd for: build me a calhacks landing page",
  "timestamp": "2025-10-25T14:33:16.118701",
  "personality": "Technical perfectionist, loves documentation, over-engineers everything, very methodical"
}