{
  "type": "code",
  "language": "typescript",
  "code": "Strap in, team. Jake The Speed Demon here\u2014building a calculator so fast, the numbers barely keep up. React frontend, Node.js backend (optional, but you know I\u2019m always ready for full throttle). This is pure performance: optimized, minimalist, no dead weight.\n\n=================== FRONTEND: src/Calculator.jsx ===================\n// Jake The Speed Demon \u2014 Calculator built for speed\n\nimport { useState } from \"react\";\n\nconst ops = [\"/\", \"*\", \"-\", \"+\"];\n\nexport default function Calculator() {\n  const [input, setInput] = useState(\"0\");\n\n  const press = val => {\n    if (input === \"0\" && !ops.includes(val)) setInput(val);\n    else if (ops.includes(val) && ops.includes(input.slice(-1))) {\n      setInput(input.slice(0, -1) + val); // Replace last op\n    } else setInput(input + val);\n  };\n\n  const calc = () => {\n    try {\n      // eslint-disable-next-line no-eval\n      let res = eval(input);\n      setInput(String(res));\n    } catch {\n      setInput(\"ERR\");\n    }\n  };\n\n  const clear = () => setInput(\"0\");\n\n  return (\n    <div className=\"bg-gray-900 p-6 rounded-xl shadow-xl w-80 mx-auto mt-20\">\n      <div className=\"bg-black text-green-400 text-3xl p-4 rounded mb-4 text-right font-mono select-all overflow-x-auto min-h-[2rem]\">\n        {input}\n      </div>\n      <div className=\"grid grid-cols-4 gap-2\">\n        {[\"7\",\"8\",\"9\",\"/\",\n          \"4\",\"5\",\"6\",\"*\",\n          \"1\",\"2\",\"3\",\"-\",\n          \"0\",\".\",\"=\",\"+\"].map(b => (\n          <button\n            key={b}\n            className={`p-4 text-xl font-bold rounded ${ops.includes(b) ? \"bg-yellow-400 text-black\" : b===\"=\" ? \"bg-blue-600 text-white\" : \"bg-gray-700 text-white\"} hover:scale-105 transition`}\n            onClick={() => b===\"=\" ? calc() : press(b)}\n          >\n            {b}\n          </button>\n        ))}\n        <button\n          className=\"col-span-4 bg-red-500 text-white p-2 rounded font-bold hover:bg-red-700 transition\"\n          onClick={clear}\n        >C</button>\n      </div>\n    </div>\n  );\n}\n\n// Drop this in your App.jsx for instant boost:\n// import Calculator from './Calculator';\n// export default function App() { return <Calculator />; }\n\n=================== TAILWIND (tailwind.config.js) ===================\nmodule.exports = {\n  content: [\"./src/**/*.{js,jsx}\"],\n  theme: { extend: {} },\n  plugins: [],\n};\n\n=================== BACKEND (OPTIONAL) ===================\n// server.js \u2014 if you want server-side calculation for security or logging\n\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\napp.post('/api/calc', (req, res) => {\n  const { expr } = req.body;\n  try {\n    // Only allow digits, ops, and decimal\n    if (!/^[\\d+\\-*/. ]+$/.test(expr)) throw new Error(\"Invalid\");\n    // eslint-disable-next-line no-eval\n    const result = eval(expr);\n    res.json({ result });\n  } catch {\n    res.status(400).json({ error: \"Invalid expression\" });\n  }\n});\n\napp.listen(4000, () => console.log(\"\ud83d\udd25 Calculator backend at 4000\"));\n\n/*\nTEAM NOTES:\n- Frontend is atomic, ultra-fast, and safe for client-side eval (demo only).\n- Backend ready for validation/logging in prod or hackathon mode.\n- PRs welcome. Don\u2019t add bloat. Performance is king.\n*/\n\nJake out\u2014next feature, next lap, let\u2019s go \ud83c\udfc1\n",
  "description": "Generated by Jake The Speed Demon for: Build a simple calculator",
  "timestamp": "2025-10-25T14:32:50.912036",
  "personality": "Fast-paced, aggressive, loves performance, ships quickly, competitive"
}